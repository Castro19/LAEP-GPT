# .github/workflows/azure-deploy.yml
# • Builds on every push / PR
# • Deploys only on push to main
# • Uses hoisted node_modules (Strategy A) and ships them.

name: Build & deploy Node.js app to Azure Web App – PolyLink

on:
  push:
    branches: [main] # build + deploy
  pull_request:
    branches: [main] # build-only

jobs:
  # ───────── BUILD ──────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with: { node-version: "20.x", cache: npm }

      - name: Install all workspaces
        run: npm ci

      - name: Build shared + server
        run: |
          npm run build:shared
          npm run build:server

      - name: Prune to production dependencies
        run: |
          npm prune --omit=dev     # modifies the *root* node_modules tree

          echo ""
          echo "📦 Top-level packages in root node_modules (after prune):"
          ls -1 node_modules | head -n 40
          echo "… (total $(ls -1 node_modules | wc -l))"

          echo ""
          echo "🔍 Smoke-test for langgraph prebuilt file:"
          test -f node_modules/@langchain/langgraph/prebuilt.js \
            && echo "✅ prebuilt.js present" \
            || { echo "❌ prebuilt.js missing"; exit 1; }

      # ---------- Assemble deploy folder ----------
      - name: Assemble deploy folder
        run: |
          rm -rf deploy
          mkdir -p deploy

          # ① app sources
          cp -r server/dist deploy/

          # ② manifest files Oryx needs at the root of the zip
          cp server/package.json deploy/

          # copy a lockfile if one exists in the server workspace, otherwise fallback to the root one
          if [ -f server/package-lock.json ]; then
            cp server/package-lock.json deploy/
          else
            echo "ℹ️  server/package-lock.json not found – copying root lock file"
            cp package-lock.json deploy/
          fi

          # copy .npmrc if present
          [ -f server/.npmrc ] && cp server/.npmrc deploy/ || true

          # ③ hoisted node_modules with all actual packages
          cp -r node_modules deploy/

          echo "📦 deploy folder preview:"
          ls -R deploy | head -n 40

      - name: Zip deploy folder
        run: |
          cd deploy
          zip -r ../server.zip .

      - uses: actions/upload-artifact@v4
        with:
          name: server-app
          path: server.zip

  # ───────── DEPLOY (push→main only) ────────────────────────
  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: { name: Production }
    permissions: { id-token: write } # OIDC login

    steps:
      - uses: actions/download-artifact@v4
        with: { name: server-app }

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_F274D06961214893BCE0EE8D715C228C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6525025D5E644854A55E3DBAB0DA6BA0 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_4FD34D38472142FAAB00A39151A44589 }}
          # (no client-secret ⇒ OIDC token is used)

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: "PolyLink"
          slot-name: "Production"
          package: server.zip
          type: runFromPackage # ← mount the ZIP; no incremental copy
