name: Continuous Integration

on: [push, pull_request]

jobs:
  client-build-and-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Install Client Dependencies
        run: |
          cd Client
          npm install
        env:
          VITE_SENTRY_AUTH_TOKEN: ${{ secrets.VITE_SENTRY_AUTH_TOKEN }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          VITE_SERVER_URL: ${{ secrets.VITE_SERVER_URL }}

      - name: Run lint
        run: cd Client && npm run lint

      - name: Build Client
        run: cd Client && npm run build
        env:
          VITE_SENTRY_AUTH_TOKEN: ${{ secrets.VITE_SENTRY_AUTH_TOKEN }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
          VITE_SERVER_URL: ${{ secrets.VITE_SERVER_URL }}
      # Add this step to cache the build
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: Client/dist
          key: ${{ runner.os }}-client-build-${{ github.sha }}

  shared-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Install Shared Dependencies
        run: cd shared && npm install

      - name: Build Shared Package
        run: cd shared && npm run build

      - name: Cache Shared Build
        uses: actions/cache@v3
        with:
          path: shared/dist
          key: ${{ runner.os }}-shared-build-${{ github.sha }}

  server-setup:
    needs: [client-build-and-lint, shared-build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      # Restore client build cache
      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: Client/dist
          key: ${{ runner.os }}-client-build-${{ github.sha }}

      # Restore shared build cache
      - name: Restore shared build
        uses: actions/cache@v3
        with:
          path: shared/dist
          key: ${{ runner.os }}-shared-build-${{ github.sha }}

      # Step 1: Install dependencies at the root (for all workspaces: shared + server)
      - name: Install All Dependencies (Workspace)
        run: |
          npm ci
          # Optional debug info
          npm list openai --depth=0 || true

      # Step 2: Build Shared + Server
      - name: Build Shared
        run: npm run build:shared

      - name: Build Server
        run: npm run build:server

      # Step 3: Create a self-contained production install for the **server workspace**
      - name: Production install (server workspace)
        run: |
          # Run from the repo root — not inside `server`
          npm ci --omit=dev \
                 --workspace=server \
                 --include-workspace-root \
                 --install-strategy=nested

          # Critical check for the required file
          test -f server/node_modules/@langchain/langgraph/prebuilt.js || {
            echo "❌ prebuilt.js missing!"; exit 1;
          }

      - name: Run lint
        run: cd server && npm run lint

      # Step 4: Create artifact with server contents
      - name: Create artifact
        run: |
          cd server
          zip -r release.zip dist node_modules package.json package-lock.json

    # Placeholder for future server-side testing
    # - name: Run Server Tests
    #   run: cd server && npm test
